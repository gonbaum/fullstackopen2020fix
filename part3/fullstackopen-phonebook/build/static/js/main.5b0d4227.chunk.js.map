{"version":3,"sources":["components/AddForm.js","components/ContactList.js","components/Filter.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["AddForm","addPerson","newName","setNewName","newTelephone","setNewTelephone","onSubmit","value","onChange","event","target","type","ContactList","persons","filter","deletePerson","personsFiltered","name","toLowerCase","includes","map","person","key","id","number","onClick","window","confirm","Filter","setFilter","Notification","errorMessage","successMessage","className","baseUrl","axios","get","then","response","data","newObject","post","delete","console","log","App","useState","setPersons","setErrorMessage","setSuccessMessage","useEffect","personService","initialContacts","restoreFields","style","margin","preventDefault","personObject","date","Date","returnedPerson","concat","setTimeout","catch","error","res","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5b0d4227.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst AddForm = ({addPerson, newName, setNewName, newTelephone, setNewTelephone}) => {\r\n\r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n    \r\n    const handleTelephoneChange = (event) => {\r\n        setNewTelephone(event.target.value)\r\n    }\r\n\r\n  return(\r\n    <div>\r\n        <h2>Add a new contact</h2>\r\n      <form onSubmit={addPerson}>\r\n      <div>\r\n          name: <input value={newName} onChange={handleNameChange} />\r\n        </div>\r\n        <div>\r\n          number: <input value={newTelephone} onChange={handleTelephoneChange} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddForm","import React from 'react'\r\n\r\nconst ContactList = ({persons, filter, deletePerson}) => {\r\n\r\n    let personsFiltered = persons.filter( ({name}) => name.toLowerCase().includes(filter.toLowerCase()))\r\n\r\n    return (\r\n        <div>\r\n        <h2>Contacts</h2>\r\n        {personsFiltered.map(person => \r\n            <div key={person.id}>\r\n                <p>\r\n                    {person.name} {person.number}\r\n                </p>\r\n                <button onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) deletePerson(person.id, person.name)} }>Delete</button>\r\n            </div>\r\n        )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactList","import React from 'react'\r\n\r\nconst Filter = ({filter, setFilter}) => {\r\n    \r\n    const handleFilterChange = (event) => {\r\n        setFilter(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            Filter shown with: <input value={filter} onChange={handleFilterChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Notification = ({ errorMessage, successMessage }) => {\r\n    if (successMessage) {\r\n        return (\r\n            <div className=\"success\">\r\n                {successMessage}\r\n            </div>\r\n        )\r\n    }\r\n    else if (errorMessage) {\r\n        return(\r\n            <div className=\"error\">\r\n                {errorMessage}\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n  }\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  const destroy = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => console.log(response))\r\n  }\r\n  \r\n  \r\n  export default { getAll, create, update, destroy }\r\n  ","import React, { useState, useEffect } from 'react'\nimport AddForm from './components/AddForm'\nimport ContactList from './components/ContactList'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\nimport './App.css'\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newTelephone, setNewTelephone ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState(null)\n  const [ successMessage, setSuccessMessage ] = useState(null)\n\n  // Add some margin\n  const divStyle = {\n    margin: '10px'\n  }\n\n  // Retrieve initial data from contacts\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialContacts => {\n        setPersons(initialContacts)\n      })\n  }, [])\n\n  // Add || Update a new contact method\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n    name: newName,\n    number: newTelephone,\n    date: new Date(),\n    }\n    personService\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        restoreFields()\n        setSuccessMessage(\n          `${returnedPerson.name} has been succesfully added`\n        )\n        setTimeout(() => {\n          setSuccessMessage(null)\n        }, 5000)\n      })\n      .catch(error => {\n        console.log(error.response.data)\n        setErrorMessage(\n          `There was an error and the contact couldn't been added: ${error.response.data.error}`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n    //Old check for duplicate for update logic\n    /* let existantPerson = persons.filter(e => e.name.toLowerCase() === personObject.name.toLowerCase())\n    if (!existantPerson.length > 0) {\n      personService\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        restoreFields()\n        setSuccessMessage(\n          `${returnedPerson.name} has been succesfully added`\n        )\n        setTimeout(() => {\n          setSuccessMessage(null)\n        }, 5000)\n      })\n      .catch(error => {\n        setErrorMessage(\n          `There was an error and the contact couldn't been added`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n    } else {\n      if (window.confirm(`${newName} is already included in the list,do you want to update this contact's number?`)) {\n        personService\n          .update(existantPerson[0].id, personObject)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== existantPerson[0].id ? person : returnedPerson))\n            console.log(`${returnedPerson.id} updated`)\n            setSuccessMessage(\n              `${returnedPerson.name} has been succesfully updated`\n            )\n            setTimeout(() => {\n              setSuccessMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setErrorMessage(\n              `There was an error and the contact couldn't been updated. The contact might be already deleted from the server. Please refresh page.`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n          })\n        restoreFields()\n      } else {\n        restoreFields()\n      }\n    }*/\n}\n\n//Delete a contact method\nconst deletePerson = (id, name) => {\n  personService\n  .destroy(id)\n  .then(res => {\n    setPersons(persons.filter(person => person.id !== id))\n    setSuccessMessage(\n      `${name} has been succesfully deleted`\n    )\n    setTimeout(() => {\n      setSuccessMessage(null)\n    }, 5000)\n  })\n  .catch(error => {\n    setErrorMessage(\n      `It seems that '${name}' was already deleted from the server. Please refresh page.`\n    )\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n  })\n}\n\n//Restore fields\nconst restoreFields = () => {\n  setNewName('')\n  setNewTelephone('')\n}\n\n  return (\n    <div style={divStyle}>\n      <h2>Phonebook</h2>\n      <Notification errorMessage={errorMessage} successMessage={successMessage} />\n      <Filter \n        filter={filter}\n        setFilter={setFilter}\n      />\n      <AddForm \n        addPerson={addPerson}\n        newName={newName} \n        setNewName={setNewName}\n        newTelephone={newTelephone}\n        setNewTelephone={setNewTelephone}\n      />\n      <ContactList \n        persons={persons}\n        filter={filter}\n        deletePerson={deletePerson}\n      />\n      \n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}