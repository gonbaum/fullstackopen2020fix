{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","errorMessage","successMessage","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setErrorMessage","setSuccessMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","key","find","n","changedNote","returnedNote","setTimeout","catch","error","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","concat","value","onChange","target","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f3cfa54b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n\r\n  const label = note.important\r\n  ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>  \r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }\r\n","import React from 'react'\r\n\r\nconst Notification = ({ errorMessage, successMessage }) => {\r\n    if (successMessage) {\r\n        return (\r\n            <div className=\"success\">\r\n                {successMessage}\r\n            </div>\r\n        )\r\n    }\r\n    else if (errorMessage) {\r\n        return(\r\n            <div className=\"error\">\r\n                {errorMessage}\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n  }\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    \r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n      }\r\n    \r\n      return (\r\n        <div style={footerStyle}>\r\n          <br />\r\n          <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n        </div> \r\n      )\r\n    }\r\n    \r\n\r\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport './App.css'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSuccessMessage] = useState(null)\n\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  console.log('render', notes.length, 'notes')\n\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important === true)\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() > 0.5,\n      }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        setSuccessMessage(\n          `Note '${note.content}' was succesfully updated`\n        )\n        setTimeout(() => {\n          setSuccessMessage(null)\n        }, 5000)\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification errorMessage={errorMessage} successMessage={successMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note \n            key={note.id} \n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>   \n    \n    <Footer />\n    </div>\n    \n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}